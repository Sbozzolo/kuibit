{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Working with Cactus horizons\n",
    "\n",
    "In this notebook, we learn how to work with horizon data. \n",
    "\n",
    "(This notebook is meant to be converted in Sphinx documentation and not used directly.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from kuibit.simdir import SimDir\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The best way to access horizon data is from `SimDir`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hor = SimDir(\"../../tests/horizons\").horizons\n",
    "\n",
    "print(hor)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we see, `kuibit` found some horizons. `kuibit` looks for data from `QuasiLocalMeasures` and `AHFinderDirect`. These two thorns use different indexing systems, and, at the moment, you must provide both to uniquely indentify an horizon. If you need information from only one of the two (e.g., you want to plot the apparent horizon), you can also use the functions `get_apparent_horizon` and `get_qlm_horizon`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "h1 = hor[(0, 1)]\n",
    "print(h1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can find the available indices using suitable attributes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(hor.available_qlm_horizons)\n",
    "print(hor.available_apparent_horizons)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once an horizon is fixed, you can access all the properties from `QuasiLocalMeasures` and from `AHFinderDirect` as attributes. These are all `TimeSeries`. For example, the mass as computed by `QuasiLocalMeasures`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(h1.mass)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For quantities from `AHFinderDirect` you have to use the `ah` namespace:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(h1.ah.area)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`kuibit` can also work with shape data. `AHFinderDirect` uses multiple patches, we can plot an example in 3D. `matplotlib` is not the correct tool for 3D plotting, but it will convey the idea;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "px, py, pz = h1.shape_at_iteration(0)\n",
    "\n",
    "ax = plt.axes(projection='3d')\n",
    "# We plot one patch\n",
    "ax.scatter(px[0], py[0], pz[0], color=\"black\", edgecolor='black')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you plot all the patches, you will have the horizon in 3D."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ax = plt.axes(projection='3d')\n",
    "for ind in range(len(px)):\n",
    "    ax.scatter(px[ind], py[ind], pz[ind])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Or, to make it look like a black hole\n",
    "ax = plt.axes(projection='3d')\n",
    "for ind in range(len(px)):\n",
    "    ax.scatter(px[ind], py[ind], pz[ind], color=\"black\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When VTK data is available (`QuasiLocalMeasures::output_vtk_every` set to a non-zero value), it is possible to work with `QuasiLocalMeasures` quantities defined on the horizon mesh. VTK data is stored in the `vtk` attribute, which is a dictionary that maps iterations to a dictionary-like object with the various variables. The most important VTK variables are `coordinates`, which are the 3D coordinates of the mesh, and `connectivity`, which describes how the various points are connected one with others. \n",
    "\n",
    "`Matplotlib` does not have good methods to plot meshes, so we will look at a simple example with a cloud of points. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "coordinates = h1.vtk_at_it(0).coordinates\n",
    "# Let's consider one VTK variable\n",
    "psi4_real = h1.vtk_at_it(0).repsi4\n",
    "\n",
    "ax = plt.axes(projection='3d')\n",
    "# coordinates is a list of (x, y, z) points, we \n",
    "# transpose it and unpack it to use it as argument\n",
    "# for scatter. Then, we color it with the values of\n",
    "# psi4_real\n",
    "ax.scatter(*coordinates.T, c=psi4_real)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In case you want to work with a 2D slice, of the shape, you can use the method `shape_outline_at_iteration` and specify how to cut the shape. \n",
    "\n",
    "Note that the the distributions of points is not uniform across the horizon and `kuibit` does not do any interpolation across points. Therefore, there are values of `cut` that will lead to a malformed horizon. It is recommended to use cuts that are along the principal directions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cut = [None, None, 0]  # Equatorial plane (z=0)\n",
    "\n",
    "shape = h1.shape_outline_at_iteration(0, cut)\n",
    "\n",
    "plt.fill(*shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also use the module `visualize_matplotlib` to plot the horizon in 2D. If you already have the shape, you can use `plot_horizon`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from kuibit import visualize_matplotlib as viz\n",
    "\n",
    "viz.plot_horizon(shape, color='r', edgecolor='b')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, you can use the higher level functions `plot_horizon_on_plane_at_iteration` or `plot_horizon_on_plane_at_time`. These take directly a `OneHorizon` object and the desired iteration/time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "viz.plot_horizon_on_plane_at_time(h1, time=0, plane=\"xy\", color='g')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are some operations that are very common in simulations of binary black holes. For example, computing the coordinate separation between the centroids of the horizons or the angular velocity of the binary. The module `hor_utils` contains several of these functions.\n",
    "\n",
    "To illustrate some of these functions, we manually create two `OneHorizon` objects that are nicely inspiraling. The details of how this is done are not important, so you can ignore the next cell and assume you have two horizons, one three times as massive as the other one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from kuibit.cactus_horizons import OneHorizon\n",
    "from kuibit.timeseries import TimeSeries\n",
    "\n",
    "from kuibit import hor_utils\n",
    "\n",
    "times = np.linspace(0, 100, 1000)\n",
    "# We add a 0.1 to avoid having identically zero separation\n",
    "cen_x = 0.1 + 10 * (times[-1] - times) * np.cos(times)\n",
    "cen_y = 0.1 + 10 * (times[-1] - times) * np.sin(times)\n",
    "cen_z = np.zeros_like(times)\n",
    "area = np.ones_like(times)\n",
    "\n",
    "hor1 = OneHorizon(ah_vars={\n",
    "                    \"centroid_x\": TimeSeries(times, cen_x),\n",
    "                    \"centroid_y\": TimeSeries(times, cen_y),\n",
    "                    \"centroid_z\": TimeSeries(times, cen_z),\n",
    "                    \"area\": TimeSeries(times, area),},\n",
    "                    qlm_vars=None, shape_files=None, vtk_files=None)\n",
    "\n",
    "hor2 = OneHorizon(ah_vars={\n",
    "                    \"centroid_x\": -TimeSeries(times, cen_x),\n",
    "                    \"centroid_y\": -TimeSeries(times, cen_y),\n",
    "                    \"centroid_z\": TimeSeries(times, cen_z),\n",
    "                    \"area\": 3 * TimeSeries(times, area),},\n",
    "                    qlm_vars=None, shape_files=None, vtk_files=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let's plot the tracjectory. For that, we do not need any special function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(hor1.ah.centroid_x, hor1.ah.centroid_y, label=\"AH 1\")\n",
    "plt.plot(hor2.ah.centroid_x, hor2.ah.centroid_y, label=\"AH 2\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This looks like a nice inspiral, but what if we moved to the frame of the center of mass? It is difficult to compute a gauge-invariant center of mass, so here we estimate it with the Netwonain formula and the irreducible mass of the horizons."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "com = hor_utils.compute_center_of_mass(hor1, hor2)\n",
    "\n",
    "# com is a Vector of TimeSeries\n",
    "com_x, com_y = com[0], com[1]\n",
    "\n",
    "plt.plot(com_x.y, com_y.y)\n",
    "plt.xlabel(\"x_CM\")\n",
    "plt.ylabel(\"y_CM\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that the center of mass is not at the center, as usually assume. We can easily adjust our orbits by subtracting the location of the center of mass, if we want to do so.\n",
    "\n",
    "Another common task is to compute the separation, and we can easily compute it along the three axis or its magnitude. The separation comes with a sign: we compute it as `hor1 - hor2`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "separation = hor_utils.compute_separation_vector(hor1, hor2)\n",
    "separation_magn = hor_utils.compute_separation(hor1, hor2)\n",
    "\n",
    "plt.plot(separation[0], label=\"x\")\n",
    "plt.plot(separation[1], label=\"y\")\n",
    "plt.plot(separation[2], label=\"z\")\n",
    "plt.plot(separation_magn, label=\"Magnitude\")\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Separation\")\n",
    "plt.legend()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
