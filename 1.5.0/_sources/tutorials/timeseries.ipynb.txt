{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Working with time series, frequency series, and unit conversion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this notebook, we show some of the most useful features of the [timeseries](../series.rst) module. To do so, we will analyze a fake gravitational-wave signal. We will also show the [frequencyseries](../series.rst) module and the [unitconv](../unitconv.rst) modules.\n",
    "\n",
    "First, let's generate this signal. \n",
    "\n",
    "(This notebook is meant to be converted in Sphinx documentation and not used directly.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from kuibit import timeseries as ts\n",
    "from kuibit import series\n",
    "from kuibit import unitconv as uc\n",
    "from kuibit.gw_utils import luminosity_distance_to_redshift\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = np.linspace(0, 20, 5000)\n",
    "y = np.sin(t)\n",
    "\n",
    "# Generate a TimeSeries by providing the times and the values of the series\n",
    "gw = ts.TimeSeries(t, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To access the times and the values, use ``gw.t`` and ``gw.y``. You can also iterate over the series with a for loop yielding the elements `(t, y)` at each iteration of the loop. For example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for tt, yy in gw:\n",
       "    if tt > 0.04: break  # Added here only to avoid printing a long list\n",
    "    print(tt, yy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot(ser, lab1=\"d h\", lab2=\"t\", *args, **kwargs):\n",
    "    \"\"\"Plot Series ser with labels\"\"\"\n",
    "    plt.ylabel(lab1)\n",
    "    plt.xlabel(lab2)\n",
    "    plt.plot(ser, *args, **kwargs)\n",
    "    \n",
    "plot(gw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's make this more interesting: we square the signal and add Gaussian noise. [TimeSeries](../timeseries_ref.html#kuibit.timeseries.TimeSeries) support directly using all the basic mathematical operations in Python and NumPy, so we can easily square the signal and add another TimeSeries to it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "noise = np.random.normal(0, 0.1, len(gw))  # Here we used len() on the TimeSeries\n",
    "noise_ts = ts.TimeSeries(t, noise)\n",
    "\n",
    "gw += noise_ts\n",
    "gw **= 2\n",
    "\n",
    "plot(gw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To analyze this signal, first we will smooth it. To do that, we will use the [savgol_smooth_time](../timeseries_ref.html#kuibit.timeseries.TimeSeries.savgol_smooth_time) method, which is a generalized \"running average\" filter. This method requires length of time over which we want to smooth the data.\n",
    "\n",
    "In [TimeSeries](../timeseries_ref.html#kuibit.timeseries.TimeSeries) there are always two different methods to do the same task, one with imperative verb (e.g., smooth), and the other with the past tense (e.g., smoothed). The first modifies the data, the second returns a new `TimeSeries` with the operation applied. Here, we will find what smoothing length to use by trial and error, so we will use the second method. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tsmooth = np.linspace(1, 3, 5)\n",
    "\n",
    "for tsm in tsmooth:\n",
    "    smoothed = gw.savgol_smoothed_time(tsm)\n",
    "    plot(smoothed, label=tsm)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From visual inspection it looks like that ``tsmooth = 1.5`` will work yield a clean series faithful to the original one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gw.savgol_smooth_time(1.5)\n",
    "plot(gw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, for fun, we can compute integrals and derivatives. For instance, we can compute what is the integral from 5 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gw_int = gw.integrated()\n",
    "a = 5\n",
    "b = 10\n",
    "print(f\"The integral from {a} to {b} is {gw_int(b) - gw_int(a):.4f}\")\n",
    "plot(gw_int, lab1=\"integral_0^t(dh)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we showed a very powerful feature of `TimeSeries`: you can call them on a specific time (as we did we ``gw_int(b)``). This is done using splines to interpolate to the points that are not available. Splines can also be used to take derivatives. Alternatively, one can simply take the finite (central) difference. Let's see what's the derivative of ``gw`` using splines and finite difference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gw_spline_der = gw.spline_differentiated()\n",
    "gw_numer_der = gw.differentiated()\n",
    "\n",
    "plot(gw_spline_der, label='spline')\n",
    "plot(gw_numer_der, lab1=\"derivative (dh)\", label='finite')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clearly, derivatives will be noisier than the actual data, so often it is convenient to smooth them out as shown before."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TimeSeries support complex signals. Now, we will create one using `gw` itself. We will copy `gw`, time-shift it, find the common time interval with the original `gw`, and use that as a the imaginary part."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gw_imag = gw.copy()  # It is important to deep copy the object\n",
    "gw_imag.time_shift(4)\n",
    "\n",
    "plot(gw_imag, lab1 =\"imag (dh)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gw, gw_imag = series.sample_common([gw, gw_imag], resample=True)  # Resampling to common times\n",
    "\n",
    "plot(gw, label=\"orig\")\n",
    "plot(gw_imag, label=\"new\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gw_complex = ts.TimeSeries(gw.t, gw.y + 1j * gw_imag.y)\n",
    "\n",
    "plot(gw_complex.real(), label=\"real\")\n",
    "plot(gw_complex.imag(), label=\"imag\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also compute the phase and absolute value. In particular, we will compute the unfolded phase (no wrapping over $2\\pi$)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot(gw_complex.abs(), label='abs')\n",
    "plot(gw_complex.unfolded_phase(), lab1=\"abs or phase\", label='phase')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, the unfolded phase looks a little bit unusual. This is because we made up the signal."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also compute the frequency of the phase, which we can directly smooth."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot(gw_complex.phase_frequency(tsmooth=1.5), lab1=\"freq\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we will take a Fourier transform. Before, let's pretend that the signal was in geometrized units (as in simulations), and let's make it physical assuming a scale of $M = 1 M_\\odot$. For that, use the [unitconv](../unitconv.rst) module. We define a CU object that knows how to convert units."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "CU = uc.geom_umass_msun(1) \n",
    "\n",
    "# How to convert from geometrized length to physical length?\n",
    "# Simply multiply times CU.length. Let's check that it is 1.477 km\n",
    "CU.length  # m"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we rescale `gw`, assuming that `y` is strain times distance (as usually is). Let's assume a distance of 500 Mpc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d_Mpc = 500\n",
    "\n",
    "# inverse = True means from geometrized to physical\n",
    "gw_physical = gw_complex.time_unit_changed(CU.time, inverse=True)  \n",
    "\n",
    "gw_physical *= CU.length  # dh -> dh physical\n",
    "# Now just the strain, since we assume a distance\n",
    "gw_physical /= (d_Mpc * uc.MEGAPARSEC_SI)\n",
    "\n",
    "# We have to manually add the redshift\n",
    "gw_physical.redshifted(luminosity_distance_to_redshift(d_Mpc))\n",
    "\n",
    "# And we can also find minima and maxima\n",
    "# Data can be noisy, so there are ways to filter the good extrema\n",
    "# See https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html\n",
    "maxima_t, maxima_y = gw_physical.real().local_maxima(prominence=0.1e-22)\n",
    "minima_t, minima_y = gw_physical.real().local_minima(width=10)\n",
    "\n",
    "plt.scatter(maxima_t, maxima_y)\n",
    "plt.scatter(minima_t, minima_y)\n",
    "\n",
    "plot(gw_physical.real(), lab1=\"h\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Okay, now before taking the Fourier transform, we will remove the mean and window our signal. A Tukey window will work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gw_physical.mean_remove()\n",
    "gw_physical.tukey_window(0.3)\n",
    "plot(gw_physical.real(), lab1=\"h\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can take the Fourier transform. This is easy to do:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gw_fft = gw_physical.to_FrequencySeries()\n",
    "\n",
    "# Plotting the amplitude of the Fourier transform\n",
    "plot(gw_fft.abs(), lab1=\"abs(fft)\", lab2=\"f\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The new object is a `FrequencySeries`. It is very similar to a `TimeSeries` and it shares several properties, methods, and features. \n",
    "\n",
    "Let's restrict to only positive frequencies close to zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gw_fft.crop(0, 1e5)\n",
    "plot(gw_fft.abs(), lab1=\"abs(fft)\", lab2=\"f\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can find the frequency of that peak! For this, we find all the peaks with amplitude larger than 1e-27."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f_peak = gw_fft.peaks_frequencies(1e-27)[0]\n",
    "\n",
    "print(f\"Frequency: {f_peak:.2f}\")\n",
    "plot(gw_fft.abs(), lab1=\"abs(fft)\", lab2=\"f\")\n",
    "plt.axvline(f_peak, ls = 'dashed')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The line is not on the maximum because we use a quadratic interpolation to find a more accurate location of the peak."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sometimes, it is useful to ignore some data (or example, when we know that the data is invalid). `Series` objects support _masks_ to mark the points we want to ignore. Most functions work transparently with masks: for example, if you ask for the mean of a `Series`, the masked point will be ignored. Other functions do not support masks (most notably, splines). In that case, it is best to completely remove the masked points and work with clean data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's mask all the point in the spectrum with value larger than 1e-27\n",
    "\n",
    "spectrum = gw_fft.abs()\n",
    "\n",
    "print(f\"Maximum without mask {spectrum.max():.3e}\")\n",
    "\n",
    "# Apply mask\n",
    "spectrum.mask_greater(1e-27)\n",
    "\n",
    "print(f\"Maximum with mask {spectrum.max():.3e}\")\n",
    "\n",
    "print(f\"Length with mask {len(spectrum)}\")\n",
    "\n",
    "# Remove points\n",
    "spectrum.mask_remove()\n",
    "\n",
    "print(f\"Length after having removed the masked points {len(spectrum)}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  },
  "name": "timeseries.ipynb"
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
